package com.important.DesignPattern.principle;

public class PrincipleDescription {

	/**
	 * 单一职责原则：专注降低类的复杂度，实现类要职责单一； 
	 * 开放关闭原则：所有面向对象原则的核心，设计要对扩展开放，对修改关闭；
	 * 里式替换原则：实现开放关闭原则的重要方式之一，任何父类出现的地方，都能被子类替换；
	 * 依赖倒置原则：系统抽象化的具体实现，要求面向接口编程，是面向对象设计的主要实现机制之一； 
	 * 接口隔离原则：要求接口的方法尽量少，接口尽量细化；
	 * 迪米特法则：降低系统的耦合度，使一个模块的修改尽量少的影响其他模块，扩展会相对容易；
	 * 组合复用原则：在软件设计中，尽量使用组合/聚合而不是继承达到代码复用的目的。
	 */

	/**
	 * 类之间的关系：依赖、泛化、实现、关联、聚合和组合
	 * 
	 * ①依赖：只要是在类中使用到了对方，那么他们之间就存在依赖关系
	 * ②泛化：extends
	 * ③实现：implements
	 * ④关联：类与类之间的联系，它是依赖关系的特例
	 * ⑤聚合：整体和部分的关系，可以分开；人和身份证
	 * ⑥组合：整体和部分的关系，不可以分开；人和头
	 */
	
}
