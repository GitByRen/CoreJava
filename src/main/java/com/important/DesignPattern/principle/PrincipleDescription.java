package com.important.DesignPattern.principle;

public class PrincipleDescription {

	/**
	 * 创建型模式，用于描述“怎样创建对象”，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
	 * 
	 * 结构型模式，用于描述如何将类或对象按某种布局组成更大的结构，
	 * 共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
	 * 
	 * 行为型模式，用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责，
	 * 共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、
	 * 命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
	 */
	
	/**
	 * 单一职责原则：专注降低类的复杂度，实现类要职责单一； 
	 * 开放关闭原则：所有面向对象原则的核心，设计要对扩展开放，对修改关闭；
	 * 里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。
	 * 依赖倒置原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象，系统抽象化的具体实现，要求面向接口编程，是面向对象设计的主要实现机制之一； 
	 * 接口隔离原则：要求接口的方法尽量少，接口尽量细化；
	 * 迪米特法则：降低系统的耦合度，使一个模块的修改尽量少的影响其他模块，扩展会相对容易；
	 * 组合复用原则：在软件设计中，尽量使用组合/聚合而不是继承达到代码复用的目的。
	 */

	/**
	 * 类之间的关系：依赖、泛化、实现、关联、聚合和组合
	 * 
	 * ①依赖：只要是在类中使用到了对方，那么他们之间就存在依赖关系
	 * ②泛化：extends
	 * ③实现：implements
	 * ④关联：类与类之间的联系，它是依赖关系的特例
	 * ⑤聚合：整体和部分的关系，是 has-a 的关系。可以分开；人和身份证
	 * ⑥组合：整体和部分的关系，不可以分开；人和头
	 */
	
	/**
	 * 其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；
	 * 里氏替换原则告诉我们不要破坏继承体系；
	 * 依赖倒置原则告诉我们要面向接口编程；
	 * 单一职责原则告诉我们实现类要职责单一；
	 * 接口隔离原则告诉我们在设计接口的时候要精简单一；
	 * 迪米特法则告诉我们要降低耦合度；
	 * 合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。
	 */
	
}
